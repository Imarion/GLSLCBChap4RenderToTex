#version 430

in vec3 Position;
in vec3 Normal;
in vec2 TexCoord;

uniform sampler2D RenderTex;

struct LightInfo {
    vec4 Position;  // Light position in eye coords
    vec3 Intensity; // Light intensity
};

uniform LightInfo Light;

struct MaterialInfo {
    vec3  Ka;        // Ambient  reflectivity
    vec3  Kd;        // Diffuse  reflectivity
    vec3  Ks;        // Specular reflectivity
    float Shininess; // Specular shininess factor
};

uniform MaterialInfo Material;

layout(location = 0) out vec4 FragColor;

void phongModel( vec3 position, vec3 normal, out vec3 ambAndDiff, out vec3 spec ) {
    vec3 s         = normalize(vec3(Light.Position) - position);
    vec3 v         = normalize(-position.xyz); // In eyeCoords, the viewer is at the origin -> only take negation of eyeCoords vector
    vec3 r         = reflect (-s, normal);

    float sDotN    = max(dot(s, normal), 0.0);

    vec3  ambient  = Light.Intensity * Material.Ka;
    vec3  diffuse  = Light.Intensity * Material.Kd * sDotN;

    ambAndDiff = ambient + diffuse;
    spec       = vec3(0.0);
    if (sDotN > 0.0) {
        spec = Light.Intensity * Material.Ks * pow(max(dot(r,v), 0.0), Material.Shininess);
    }

}

vec3 phongModel( vec3 pos, vec3 norm ) {

    vec3 s = normalize(vec3(Light.Position) - pos);
    vec3 v = normalize(-pos.xyz);
    vec3 r = reflect( -s, norm );

    vec3 ambient = Light.Intensity * Material.Ka;

    float sDotN = max( dot(s,norm), 0.0 );
    vec3 diffuse = Light.Intensity * Material.Kd * sDotN;

    vec3 spec = vec3(0.0);
    if( sDotN > 0.0 )
        spec = Light.Intensity * Material.Ks *
               pow( max( dot(r,v), 0.0 ), Material.Shininess );

    return ambient + diffuse + spec;
}

void main()
{    

/*    if( gl_FrontFacing ) {
        phongModel(Position, Normal);
    } else {
        phongModel(Position, -Normal);
    }
*/
    vec4 texColor = texture(RenderTex, TexCoord);
    FragColor     = vec4(phongModel(Position,Normal), 1.0) * texColor;
}
